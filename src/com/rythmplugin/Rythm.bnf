{
  parserClass="com.rythmplugin.parser.RythmParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Rythm"
  psiImplClassSuffix="Impl"
  psiPackage="com.rythmplugin.psi"
  psiImplPackage="com.rythmplugin.psi.impl"

  elementTypeHolderClass="com.rythmplugin.psi.RythmTypes"
  elementTypeClass="com.rythmplugin.psi.RythmElementType"
  tokenTypeClass="com.rythmplugin.psi.RythmTokenType"
}

rythmFile ::= item_*

private item_ ::= (property|COMMENT|CRLF|tokens/*|HTML_PART|JS_PART*/)

property ::= RYTHM_ARGS| SEPARATOR|RYTHM_SECTION|RYTHM_EXTENDS|RYTHM_IMPORT|RYTHM_RENDER|RYTHM_INVOKE|RYTHM_ELSE|RYTHM_IF
|RYTHM_FOR|RYTHM_I18N|RYTHM_PREFIX|RYTHM_NAVBOX|RYTHM|RYTHM_METHOD| RYTHM_SYN|RYTHM_BLOCK|RYTHM_PART|RYTHM_KEY

/*
{
tokens1 = [
SEMI = ';'
EQ = '='
LP = '('
RP = ')'

space = 'regexp:\s+'
comment = 'regexp: @*'
number = 'regexp: \d+(\.\d*)?'
id = 'regexp: \p{Alpha}\w*'
string = "regexp: ('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

op_1 = '+'
op_2 = '-'
op_3 = '*'
op_4= '/'
op_5 = '!'
]
name(".*expr")= 'expression'
extends(".*expr")= expr
}
*/

tokens ::= RBRACE|RBRACKET|RPAREN|PLUS_PLUS|MINUS_MINUS|LBRACE|LBRACKET|LPAREN|DOUBLE_COLON|
COLON|SEMICOLON|COMMA|MULTI_ARGS|CLASS_ATTR_END|CLASS_ATTR_START|SHIFT_LEFT|SHIFT_RIGHT
|UNSIGNED_SHIFT_RIGHT|CMP|EQ_EQ|NOT_EQ|LESS_OR_EQ|GREATER_OR_EQ|SEND_CHANNEL|PLUS_EQ|
MINUS_EQ|MUL_EQ| DIV_EQ| REMAINDER_EQ|OR_OR|AND_AND|EQ|NOT|BIT_NOT|BIT_OR|BIT_AND|
LESS|GREATER|PLUS|MINUS|MUL|DIV|REMAINDER|QUESTION|AT|DOT|VOKALE|KONSONANTEN|DIGITS|QM|AS|HASHTAG

RBRACE               ::=  '}'
RBRACKET             ::=  ']'
RPAREN               ::=  ')'
PLUS_PLUS            ::=  '++'
MINUS_MINUS          ::=  '--'

LBRACE               ::=  '{'
LBRACKET               ::=  '['
LPAREN               ::=  '('
DOUBLE_COLON         ::=  '::'
COLON                ::=  ':'
SEMICOLON            ::=  ';'
COMMA                ::=  ','
MULTI_ARGS           ::=  '...'
CLASS_ATTR_START     ::=  '</'
CLASS_ATTR_END       ::=  '/>'
SHIFT_LEFT           ::=  '<<'
SHIFT_RIGHT          ::=  '>>'
UNSIGNED_SHIFT_RIGHT ::=  '>>>'
CMP                  ::=  '<=>'
EQ_EQ                ::=  '=='
NOT_EQ               ::=  '!='
LESS_OR_EQ           ::=  '<='
GREATER_OR_EQ        ::=  '>='
SEND_CHANNEL         ::=  '<-'
PLUS_EQ              ::=  '+='
MINUS_EQ             ::=  '-='
MUL_EQ               ::=  '*='
DIV_EQ               ::=  '/='
REMAINDER_EQ         ::=  '%='
OR_OR                ::=  '||'
AND_AND              ::=  '&&'
EQ                   ::=  '='
NOT                  ::=  '!'
BIT_NOT              ::=  '~'
BIT_OR               ::=  '|'
BIT_XOR              ::=  '^'
BIT_AND              ::=  '&'
LESS                 ::=  '<'
GREATER              ::=  '>'
PLUS                 ::=  '+'
MINUS                ::=  '-'
MUL                  ::=  '*'
DIV                  ::=  '/'
REMAINDER            ::=  '%'
QUESTION             ::=  '?'
AT                   ::=  '@'
DOT                  ::= '.'
QM                   ::= '"'
AS                   ::= "'"
HASHTAG              ::= "#"


VOKALE ::= 'a'|'e'|'i'|'o'|'u'
KONSONANTEN ::= 'b'|'c'|'d'|'f'|'g'|'h'|'j'|'k'|'l'|'m'|'n'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z'
DIGITS ::= '1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'0'
